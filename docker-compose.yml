# Optimized MCP Server Stack for Remote Deployment
# Configured for Cloudflare Tunnel integration

services:
  #########################################################
  # 1. Notion MCP Server
  #########################################################
  new-wave-protocol-notion:
    image: mcp/notion:latest
    container_name: new-wave-protocol-notion
    restart: unless-stopped
    ports:
      - "${NOTION_HOST_PORT}:8080"
    environment:
      # Must be valid JSON (no line breaks)
      OPENAPI_MCP_HEADERS: "${NOTION_MCP_HEADERS}"

  #########################################################
  # 2. Filesystem MCP Server
  #########################################################
  filesystem:
    image: mcp/filesystem:latest
    container_name: filesystem-mcp
    restart: unless-stopped
    volumes:
      - filesystem-data:/mnt/shared:ro
    command: ["/mnt/shared"]
    ports:
      - "${FILESYSTEM_HOST_PORT}:8080"

  #########################################################
  # 3. Discord MCP Server
  #########################################################
  mcp-discord:
    image: mcp/mcp-discord:latest
    container_name: mcp-discord
    restart: unless-stopped
    ports:
      - "${DISCORD_HOST_PORT}:8080"
    environment:
      DISCORD_TOKEN: "${DISCORD_TOKEN}"
      DISCORD_BOT_PERMISSIONS: "${DISCORD_BOT_PERMISSIONS}"

  #########################################################
  # 4. Sequential Thinking MCP Server
  #########################################################
  sequential-thinking:
    image: mcp/sequentialthinking:latest
    container_name: mcp-sequentialthinking
    restart: unless-stopped
    ports:
      - "${SEQUENTIAL_THINKING_HOST_PORT}:8080"

  #########################################################
  # 5. Brave Search MCP Server
  #########################################################
  brave-search:
    image: mcp/brave-search:latest
    container_name: mcp-brave-search
    restart: unless-stopped
    ports:
      - "${BRAVE_SEARCH_HOST_PORT}:8080"
    environment:
      BRAVE_API_KEY: "${BRAVE_API_KEY}"

  #########################################################
  # 6. Tavily Search MCP Server
  #########################################################
  tavily:
    image: mcp/tavily:latest
    container_name: mcp-tavily
    restart: unless-stopped
    ports:
      - "${TAVILY_HOST_PORT}:8080"
    environment:
      TAVILY_API_KEY: "${TAVILY_API_KEY}"

  #########################################################
  # 7. Firecrawl MCP Server
  #########################################################
  firecrawl:
    image: mcp/firecrawl:latest
    container_name: mcp-firecrawl
    restart: unless-stopped
    ports:
      - "${FIRECRAWL_HOST_PORT}:8080"
    environment:
      FIRECRAWL_API_URL: "${FIRECRAWL_API_URL}"
      FIRECRAWL_RETRY_MAX_ATTEMPTS: "${FIRECRAWL_RETRY_MAX_ATTEMPTS}"
      FIRECRAWL_RETRY_INITIAL_DELAY: "${FIRECRAWL_RETRY_INITIAL_DELAY}"
      FIRECRAWL_RETRY_MAX_DELAY: "${FIRECRAWL_RETRY_MAX_DELAY}"
      FIRECRAWL_RETRY_BACKOFF_FACTOR: "${FIRECRAWL_RETRY_BACKOFF_FACTOR}"
      FIRECRAWL_CREDIT_WARNING_THRESHOLD: "${FIRECRAWL_CREDIT_WARNING_THRESHOLD}"
      FIRECRAWL_CREDIT_CRITICAL_THRESHOLD: "${FIRECRAWL_CREDIT_CRITICAL_THRESHOLD}"
      FIRECRAWL_API_KEY: "${FIRECRAWL_API_KEY}"

  #########################################################
  # 8. Fetch MCP Server
  #########################################################
  fetch:
    image: mcp/fetch:latest
    container_name: mcp-fetch
    restart: unless-stopped
    ports:
      - "${FETCH_HOST_PORT}:8080"

  #########################################################
  # 9. Playwright MCP Server
  #########################################################
  playwright:
    image: mcp/playwright:latest
    container_name: mcp-playwright
    restart: unless-stopped
    ports:
      - "${PLAYWRIGHT_HOST_PORT}:8080"

  #########################################################
  # 10. GitHub MCP Server
  #########################################################
  github:
    image: mcp/github-mcp-server:latest
    container_name: mcp-github
    restart: unless-stopped
    ports:
      - "${GITHUB_HOST_PORT}:8080"
    environment:
      GITHUB_PERSONAL_ACCESS_TOKEN: "${GITHUB_PERSONAL_ACCESS_TOKEN}"

  #########################################################
  # 11. Desktop Commander MCP Server
  #########################################################
  desktop-commander:
    image: mcp/desktop-commander:latest
    container_name: mcp-desktop-commander
    restart: unless-stopped
    ports:
      - "${DESKTOP_COMMANDER_HOST_PORT}:8080"

  #########################################################
  # 12. Postgres MCP Server
  #########################################################
  postgres-mcp:
    image: mcp/postgres:latest
    container_name: mcp-postgres
    restart: unless-stopped
    ports:
      - "${SUPABASE_DEV_HOST_PORT}:8080"
    environment:
      POSTGRES_CONNECTION_URL: "${SUPABASE_DEV_CONN}"

  #########################################################
  # 13. Context7 MCP Server (Remote Endpoints)
  #########################################################
  context7:
    image: nginx:alpine
    container_name: mcp-context7
    restart: unless-stopped
    ports:
      - "${CONTEXT7_HOST_PORT}:80"
    command: |
      sh -c '
      cat > /etc/nginx/nginx.conf << EOF
      events { worker_connections 1024; }
      http {
        server {
          listen 80;
          location /health {
            return 200 "Context7 Remote MCP Proxy - OK";
            add_header Content-Type text/plain;
          }
          location /mcp {
            proxy_pass https://mcp.context7.com/mcp;
            proxy_ssl_server_name on;
            proxy_set_header Host mcp.context7.com;
          }
          location /sse {
            proxy_pass https://mcp.context7.com/sse;
            proxy_ssl_server_name on;
            proxy_set_header Host mcp.context7.com;
            proxy_buffering off;
          }
          location /tools {
            proxy_pass https://mcp.context7.com/mcp;
            proxy_ssl_server_name on;
            proxy_set_header Host mcp.context7.com;
          }
          location / {
            return 200 "Context7 MCP Remote Proxy\nEndpoints: /mcp, /sse, /tools, /health";
            add_header Content-Type text/plain;
          }
        }
      }
      EOF
      exec nginx -g "daemon off;"
      '

  #########################################################
  # 14. YouTube Transcript MCP Server
  #########################################################
  youtube_transcript:
    image: mcp/youtube-transcript:latest
    container_name: mcp-youtube-transcript
    restart: unless-stopped
    ports:
      - "${YOUTUBE_TRANSCRIPT_HOST_PORT}:8080"

  #########################################################
  # 15. Redis (for Memory MCP)
  #########################################################
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    command: ["redis-server", "--save", ""]
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_HOST_PORT}:6379"

  #########################################################
  # 16. Memory MCP Server (requires Redis)
  #########################################################
  memory:
    image: mcp/memory:latest
    container_name: mcp-memory
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_URL: "redis://redis:6379"
    ports:
      - "${MEMORY_HOST_PORT}:8080"

  #########################################################
  # 17. @magicuidesign/mcp MCP Server (Placeholder)
  #########################################################
  magicuidesign-mcp:
    image: nginx:alpine
    container_name: mcp-magicuidesign
    restart: unless-stopped
    ports:
      - "${MAGICUIDESIGN_HOST_PORT}:80"
    command: |
      sh -c '
      cat > /etc/nginx/nginx.conf << EOF
      events { worker_connections 1024; }
      http {
        server {
          listen 80;
          location /health {
            return 200 "MagicUI Design MCP - Placeholder (awaiting remote endpoint)";
            add_header Content-Type text/plain;
          }
          location / {
            return 503 "MagicUI Design MCP - Remote endpoint not yet available";
            add_header Content-Type text/plain;
          }
        }
      }
      EOF
      exec nginx -g "daemon off;"
      '

  #########################################################
  # Helper: Filesystem Volume Manager
  # Use this to populate/manage the filesystem-data volume
  # Run: docker compose run --rm filesystem-helper sh
  #########################################################
  filesystem-helper:
    image: alpine:latest
    container_name: filesystem-helper
    volumes:
      - filesystem-data:/data
    command: echo "Helper container for managing filesystem-data volume"
    profiles:
      - tools

volumes:
  filesystem-data: {}
  redis-data: {}
